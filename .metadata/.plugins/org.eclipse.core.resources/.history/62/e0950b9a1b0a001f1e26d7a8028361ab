package com.user.service.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.user.service.entity.Hotel;
import com.user.service.entity.Rating;
import com.user.service.entity.User;
import com.user.service.exceptions.ResourcesNotFoundExceptions;
import com.user.service.repositary.UserRepositary;

@Service
public class UserServicesImpl implements UserServices {

	@Autowired
	private UserRepositary repositary;
	
	@Autowired
	private final RestTemplate template;

    UserServicesImpl(RestTemplate template) {
        this.template = template;
    }

	@Override
	public User saveUser(User user) {
		String id = UUID.randomUUID().toString();
		user.setUserId(id);
		return repositary.save(user);
	}

	@Override
	public List<User> getAllUsers() {
		List<User> users = repositary.findAll();
		
		for(User user : users) {
		ArrayList<Rating> ratings = template.getForObject("http://192.168.76.234:8083/rating/user/"+user.getUserId(), ArrayList.class);
		user.setRating(ratings);
		}
		return users;
	}

	@Override
	public User findByUserId(String userId) {
		User user =  repositary.findByUserId(userId)
				.orElseThrow(() -> new ResourcesNotFoundExceptions("User given id is not found on server " + userId));
		
		Rating[] arrayOfRating = template.getForObject("http://USER-SERVICE/rating/user/"+userId, Rating[].class);
		List<Rating> ratingOfList = Arrays.stream(arrayOfRating).toList();
		
		List<Rating> ratings = ratingOfList.stream().map(rating ->{
			ResponseEntity<Hotel> hotels = template.getForEntity("http://192.168.76.234:8082/hotel/"+rating.getHotelId(), Hotel.class );
			
			rating.setHotal(hotels.getBody());
			
			return rating;
		}).collect(Collectors.toList());
		
		user.setRating(ratings);
		return user;
		
	}

	@Override
	public User deleteByUserId(String userId) {
		User deleteduser = findByUserId(userId);
		repositary.deleteByUserId(userId);
		return deleteduser;
	}

	@Override
	public User updateByUserId(User user) {
		repositary.save(user);
		return user;
	}

}
